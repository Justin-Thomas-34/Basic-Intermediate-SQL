In this lesson, you will learn: 

- Why joins are critical in SQL and how join keys allow tables to be connected
- The difference between available join types
- How to write queries that combine columns from two tables using JOINs

Primary and foreign keys
Tables in a database are structured with primary keys and foreign keys that can be used to combine tables. The join keys can be described in the following way:


The primary key is a column that is the unique identifier of a specific table. A unique identifier means that one value of the column represents one unique row in the table.
The foreign key is a column that is not the unique identifier of the table it is stored in, but it is a unique identifier of another table. This means a foreign key value can appear more than once in the table.

Why is the ability to work with joins so important in SQL?
Joins allow you to combine columns from multiple tables. This is essential because data is almost never stored in a single table, so you’ll be combining data from multiple tables on a regular basis in a Data job.
Syntax of joins
SELECT 
	<table_1.column_1> ,
	<table_1.column_2> 


FROM	
	<table_1>
_ JOIN -- _ can be replaced with INNER, or any of the other JOIN types (LEFT, RIGHT, FULL)
	<table_2> 
ON <table_1.join_key> = <table_2.join_key>

;

Combing two tables with an INNER JOIN 
SELECT 
	order_items.order_id, -- specifying table names to remove ambiguity about which table a column belongs to
	order_items.created_at,
	order_items.shipped_at,
	order_items.product_id,
	products.product_name

FROM 
	order_items
INNER JOIN -- we want an INNER JOIN returning records where product_id is in both order_items and products
	products 
ON order_items.product_id = products.product_id -- we use the ON keyword to specify join keys
;

Be aware: INNER JOIN restricts your query results to only rows where the join keys of the tables match. All rows that have non-matching join keys will not show in your result, and you will not receive any error message about this!


Exercise
Which products are distributed by which distribution centers? Write a query that shows the product name, product ID, and distribution center name for each product.

Solution
SELECT products.product_name,
			 products.product_id,
			 distribution_centers.name AS distribution_center

FROM 
	products
INNER JOIN 
	distribution_centers 
ON 
	products.distribution_center_id = distribution_centers.distribution_center_id
;

Combining two tables using LEFT JOIN
SELECT 
	order_items.order_id,
	order_items.created_at,
	order_items.shipped_at,
	order_items.product_id,
	products.product_name

FROM 
	order_items
LEFT JOIN -- this returns ALL records from order_items, even if they don't exist in products!
	products 
ON order_items.product_id = products.product_id
;

Combining two tables using FULL JOIN

SELECT 
	order_items.order_id,
	order_items.created_at,
	order_items.shipped_at,
	order_items.product_id,
	products.product_name

FROM 
	order_items
FULL JOIN -- FULL OUTER JOIN gives the same result as FULL JOIN
	products 
ON order_items.product_id = products.product_id
;

Exercise
How many products are distributed by each distribution center? Ensure to include the name of all distribution centers even if they don’t distribute any products.
SELECT 
	distribution_centers.name AS distribution_center,
	COUNT(products.product_id) AS total_products

FROM 
	distribution_centers
LEFT JOIN 
	products 
ON 
	products.distribution_center_id = distribution_centers.distribution_center_id
     
GROUP BY 
	distribution_centers.name
;

How many products have a distribution center ID not available in the table distribution_centers?
SELECT 
	COUNT(products.product_id) AS total_products

FROM 
	products
LEFT JOIN 
	distribution_centers 
ON 
	products.distribution_center_id = distribution_centers.distribution_center_id

WHERE distribution_centers.distribution_center_id IS NULL
;

--FULL JOIN also provides the correct answers

Here is a quick recap of key points to take away from this lesson: 


Joins allow us to connect tables within a database.
INNER JOIN combines data using join keys. If the join key does not find a match between the tables, the rows will not be shown in the query result.
OUTER JOIN is a less restrictive join type. If the join key does not find a match between the tables, the rows will still show in the query result, but the columns will show NULL values for the join keys that did not match.
